openapi : 3.0.0
info:
 title: Profile Service
 description: Manage profiles
 version: 0.0.1
 
servers:
 - url: http://localhost:8080
 
paths:
 /PS/profiles:
  get:
   summary: Returns a list of all profiles.
   responses:
    "200" :
     description: All profiles
     content:
      application/json:
       schema:
        type: array
        items:
         $ref: "#/components/schemas/Profile"
  put:
    summary: Create a profile
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Profile"
    responses:
      "200":
        description: The profile was created.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      "409":
        description: the email address is already in use
      "403":
        description: the object was not valid
        
 /PS/profiles/{id}:
   parameters:
    - name: id
      in: path
      description: ID of the profile
      required: true
      schema:
       type: integer
   delete:
    summary: Delete a profile
    responses:
     200:
      description: The profile was deleted
      
  /PS/profiles/{id}/name:
   parameters:
    - name: id
      in: path
      description: ID of the profile
      required: true
      schema:
       type: integer
   put:
    summary: Create a name
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Profile/name"
    responses:
      "200":
        description: name choosed.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      "403":
        description: the name selected was not valid value.
    get:
     summary: Returns a list of all profiles.
      responses:
       "200" :
        description: All profiles
        content:
         application/json:
          schema:
           type: array
           items:
            $ref: "#/components/schemas/Profile"

components:
 schemas:
  Profile:
   type: object
   properties:
    id:
     type: integer
     example: 4
    name:
     type: string
     example: Hans-JÃ¶rg
    email:
     type: string
     example : hanse@example.com
    description:
     type : string
     example : "A user!"
   required:
     - name
     - email